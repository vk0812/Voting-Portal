{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../service/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/button\";\nexport class LoginComponent {\n  constructor(builder, service, router, toastr) {\n    this.builder = builder;\n    this.service = service;\n    this.router = router;\n    this.toastr = toastr;\n    this.loginform = this.builder.group({\n      username: this.builder.control('', Validators.required),\n      password: this.builder.control('', Validators.required)\n    });\n    sessionStorage.clear();\n  }\n  proceedlogin() {\n    if (this.loginform.valid) {\n      this.service.Getbycode(this.loginform.value.username).subscribe(res => {\n        this.userdata = res;\n        console.log(this.userdata);\n        if (this.userdata.password === this.loginform.value.password) {\n          if (this.userdata.isactive) {\n            sessionStorage.setItem('username', this.userdata.id);\n            sessionStorage.setItem('role', this.userdata.role);\n            this.router.navigate(['']);\n          } else {\n            this.toastr.error('Please contact Admin', 'InActive User');\n          }\n        } else {\n          this.toastr.error('Invalid credentials');\n        }\n      });\n    } else {\n      this.toastr.warning('Please enter valid data.');\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 24,\n  vars: 1,\n  consts: [[2, \"background-color\", \"aquamarine\"], [2, \"font-size\", \"xx-large\", \"color\", \"maroon\"], [1, \"example-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"example-full-width;\", \"margin-left=3px\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [1, \"example-full-width\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"routerLink\", \"/register\", \"mat-raised-button\", \"\", \"color\", \"accent\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\")(2, \"h1\", 1);\n      i0.ɵɵtext(3, \"\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\");\n      i0.ɵɵelementStart(4, \"b\");\n      i0.ɵɵtext(5, \"User Login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.proceedlogin();\n      });\n      i0.ɵɵelementStart(8, \"div\")(9, \"mat-form-field\", 3)(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\")(14, \"mat-form-field\", 5)(15, \"mat-label\");\n      i0.ɵɵtext(16, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\")(19, \"button\", 7);\n      i0.ɵɵtext(20, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21, \"\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0 \");\n      i0.ɵɵelementStart(22, \"a\", 8);\n      i0.ɵɵtext(23, \"New User?\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginform);\n    }\n  },\n  dependencies: [i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatInput, i6.MatFormField, i6.MatLabel, i7.MatCard, i7.MatCardContent, i7.MatCardHeader, i8.MatAnchor, i8.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;;;;;AAUxD,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,OAAoB,EAASC,OAAoB,EAAUC,MAAc,EACnFC,MAAqB;IADX,YAAO,GAAPH,OAAO;IAAsB,YAAO,GAAPC,OAAO;IAAuB,WAAM,GAANC,MAAM;IAC3E,WAAM,GAANC,MAAM;IAKhB,cAAS,GAAG,IAAI,CAACH,OAAO,CAACI,KAAK,CAAC;MAC7BC,QAAQ,EAAE,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACvDC,QAAQ,EAAE,IAAI,CAACR,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ;KACvD,CAAC;IAPEE,cAAc,CAACC,KAAK,EAAE;EAE1B;EAOAC,YAAY;IACV,IAAI,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE;MACxB,IAAI,CAACZ,OAAO,CAACa,SAAS,CAAC,IAAI,CAACF,SAAS,CAACG,KAAK,CAACV,QAAQ,CAAC,CAACW,SAAS,CAACC,GAAG,IAAG;QACpE,IAAI,CAACC,QAAQ,GAAGD,GAAG;QACnBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,QAAQ,CAAC;QAC1B,IAAI,IAAI,CAACA,QAAQ,CAACV,QAAQ,KAAK,IAAI,CAACI,SAAS,CAACG,KAAK,CAACP,QAAQ,EAAE;UAC5D,IAAI,IAAI,CAACU,QAAQ,CAACG,QAAQ,EAAE;YAC1BZ,cAAc,CAACa,OAAO,CAAC,UAAU,EAAC,IAAI,CAACJ,QAAQ,CAACK,EAAE,CAAC;YACnDd,cAAc,CAACa,OAAO,CAAC,MAAM,EAAC,IAAI,CAACJ,QAAQ,CAACM,IAAI,CAAC;YACjD,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;WAC3B,MAAM;YACL,IAAI,CAACtB,MAAM,CAACuB,KAAK,CAAC,sBAAsB,EAAE,eAAe,CAAC;;SAE7D,MAAM;UACL,IAAI,CAACvB,MAAM,CAACuB,KAAK,CAAC,qBAAqB,CAAC;;MAE5C,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACvB,MAAM,CAACwB,OAAO,CAAC,0BAA0B,CAAC;;EAEnD;;AAjCW7B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA8B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BC,mCAAgD;MAEIA,gTAAgS;MAAAA,yBAAG;MAAAA,0BAAU;MAAAA,iBAAI;MAEjWA,wCAAkB;MAIdA;QAAA,OAAYC,kBAAc;MAAA,EAAC;MAC1BD,2BAAK;MAGWA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA6C;MACjDA,iBAAiB;MAErBA,4BAAK;MAGcA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA6D;MACjEA,iBAAiB;MAGrBA,4BAAK;MACuCA,sBAAK;MAAAA,iBAAS;MAAAA,gDACxD;MAAAA,6BAA2D;MAAAA,0BAAS;MAAAA,iBAAI;;;MAnBxEA,eAAuB;MAAvBA,yCAAuB","names":["Validators","LoginComponent","constructor","builder","service","router","toastr","group","username","control","required","password","sessionStorage","clear","proceedlogin","loginform","valid","Getbycode","value","subscribe","res","userdata","console","log","isactive","setItem","id","role","navigate","error","warning","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\DELL\\vote-portal\\src\\app\\login\\login.component.ts","C:\\Users\\DELL\\vote-portal\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms'\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr'\nimport { AuthService } from '../service/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  constructor(private builder: FormBuilder,private service: AuthService, private router: Router,\n    private toastr: ToastrService) {\n      sessionStorage.clear();\n\n  }\n  userdata:any;\n  loginform = this.builder.group({\n    username: this.builder.control('', Validators.required),\n    password: this.builder.control('', Validators.required)\n  });\n\n  proceedlogin() {\n    if (this.loginform.valid) {\n      this.service.Getbycode(this.loginform.value.username).subscribe(res => {\n        this.userdata = res;\n        console.log(this.userdata);\n        if (this.userdata.password === this.loginform.value.password) {\n          if (this.userdata.isactive) {\n            sessionStorage.setItem('username',this.userdata.id);\n            sessionStorage.setItem('role',this.userdata.role);\n            this.router.navigate(['']);\n          } else {\n            this.toastr.error('Please contact Admin', 'InActive User');\n          }\n        } else {\n          this.toastr.error('Invalid credentials');\n        }\n      });\n    } else {\n      this.toastr.warning('Please enter valid data.')\n    }\n  }\n}\n","<mat-card style=\"background-color: aquamarine;\">\n    <mat-card-header>\n      <h1 style=\"font-size: xx-large; color:maroon\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>User Login</b></h1>\n    </mat-card-header>\n    <mat-card-content>\n      <form\n        class=\"example-form\"\n        [formGroup]=\"loginform\"\n        (ngSubmit)=\"proceedlogin()\">\n         <div>\n  \n          <mat-form-field class=\"example-full-width; margin-left=3px\">\n              <mat-label>Username</mat-label>\n              <input matInput formControlName=\"username\" />\n          </mat-form-field>\n      </div>\n      <div>\n  \n          <mat-form-field class=\"example-full-width\">\n              <mat-label>Password</mat-label>\n              <input type=\"password\" matInput formControlName=\"password\" />\n          </mat-form-field>\n      </div>\n     \n      <div>\n        <button mat-raised-button color=\"primary\">Login</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <a routerLink=\"/register\" mat-raised-button color=\"accent\">New User?</a>\n      </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}