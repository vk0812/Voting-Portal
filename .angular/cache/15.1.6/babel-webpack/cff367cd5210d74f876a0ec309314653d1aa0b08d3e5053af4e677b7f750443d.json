{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../service/auth.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/checkbox\";\nfunction UpdatepopupComponent_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r1.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.name, \" \");\n  }\n}\nexport class UpdatepopupComponent {\n  constructor(builder, service, toastr, dialogref, data) {\n    // this.service.getuserrole().subscribe(res => {\n    //   this.rolelist = res;\n    // });\n    this.builder = builder;\n    this.service = service;\n    this.toastr = toastr;\n    this.dialogref = dialogref;\n    this.data = data;\n    this.registerform = this.builder.group({\n      id: this.builder.control(''),\n      name: this.builder.control(''),\n      password: this.builder.control(''),\n      email: this.builder.control(''),\n      gender: this.builder.control('male'),\n      role: this.builder.control('', Validators.required),\n      isactive: this.builder.control(false)\n    });\n  }\n  ngOnInit() {\n    this.service.GetAllRole().subscribe(res => {\n      this.rolelist = res;\n    });\n    if (this.data.usercode != '' && this.data.usercode != null) {\n      this.service.Getbycode(this.data.usercode).subscribe(res => {\n        this.editdata = res;\n        this.registerform.setValue({\n          id: this.editdata.id,\n          name: this.editdata.name,\n          email: this.editdata.email,\n          password: this.editdata.password,\n          role: this.editdata.role,\n          gender: this.editdata.gender,\n          isactive: this.editdata.isactive\n        });\n      });\n    }\n  }\n  loaduserdata(code) {\n    this.service.GetUserbyCode(code).subscribe(res => {\n      this.editdata = res;\n      console.log(this.editdata);\n      this.registerform.setValue({\n        id: this.editdata.id,\n        name: this.editdata.name,\n        password: this.editdata.password,\n        email: this.editdata.email,\n        gender: this.editdata.gender,\n        role: this.editdata.role,\n        isactive: this.editdata.isactive\n      });\n    });\n  }\n  UpdateUser() {\n    this.service.updateuser(this.registerform.value.id, this.registerform.value).subscribe(res => {\n      this.toastr.success('Updated successfully.');\n      this.dialogref.close();\n    });\n  }\n}\nUpdatepopupComponent.ɵfac = function UpdatepopupComponent_Factory(t) {\n  return new (t || UpdatepopupComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\nUpdatepopupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdatepopupComponent,\n  selectors: [[\"app-updatepopup\"]],\n  decls: 22,\n  vars: 2,\n  consts: [[\"mat-dialog-title\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"mat-dialog-content\", \"\"], [\"formControlName\", \"role\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"example-section\"], [\"formControlName\", \"isactive\", 1, \"example-margin\"], [\"mat-dialog-actions\", \"\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", \"cdkFocusInitial\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"mat-dialog-close\", \"\"], [3, \"value\"]],\n  template: function UpdatepopupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Update User\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdatepopupComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.UpdateUser();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"mat-form-field\")(5, \"mat-label\");\n      i0.ɵɵtext(6, \"Role\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-select\", 3)(8, \"mat-option\", 4);\n      i0.ɵɵtext(9, \"Select Role\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-option\", 4);\n      i0.ɵɵtext(11, \"admin\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, UpdatepopupComponent_mat_option_12_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"section\", 6);\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"mat-checkbox\", 7);\n      i0.ɵɵtext(16, \"Is Active\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"div\", 8)(18, \"button\", 9);\n      i0.ɵɵtext(19, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 10);\n      i0.ɵɵtext(21, \"Close\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerform);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rolelist);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatFormField, i6.MatLabel, i7.MatButton, i4.MatDialogClose, i4.MatDialogTitle, i4.MatDialogContent, i4.MatDialogActions, i8.MatSelect, i9.MatOption, i10.MatCheckbox],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","MAT_DIALOG_DATA","i0","UpdatepopupComponent","constructor","builder","service","toastr","dialogref","data","group","id","control","name","password","email","gender","role","required","isactive","ngOnInit","GetAllRole","subscribe","res","rolelist","usercode","Getbycode","editdata","registerform","setValue","loaduserdata","code","GetUserbyCode","console","log","UpdateUser","updateuser","value","success","close","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\DELL\\vote-portal\\src\\app\\updatepopup\\updatepopup.component.ts","C:\\Users\\DELL\\vote-portal\\src\\app\\updatepopup\\updatepopup.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms'\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from '../service/auth.service';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-updatepopup',\n  templateUrl: './updatepopup.component.html',\n  styleUrls: ['./updatepopup.component.css']\n})\nexport class UpdatepopupComponent implements OnInit {\n\n  constructor(private builder: FormBuilder, private service: AuthService, private toastr: ToastrService,\n    private dialogref: MatDialogRef<UpdatepopupComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\n\n    // this.service.getuserrole().subscribe(res => {\n    //   this.rolelist = res;\n    // });\n    \n    \n\n  }\n  editdata: any;\n  ngOnInit(): void {\n    this.service.GetAllRole().subscribe(res=>{\n      this.rolelist=res;\n    })\n    if (this.data.usercode != '' && this.data.usercode != null) {\n      this.service.Getbycode(this.data.usercode).subscribe(res=>{\n        this.editdata=res;\n        this.registerform.setValue({id:this.editdata.id,name:this.editdata.name,email:this.editdata.email,password:this.editdata.password,role:this.editdata.role,gender:this.editdata.gender,isactive:this.editdata.isactive})\n\n      });\n    }\n  }\n  rolelist: any;\n  \n\n  registerform = this.builder.group({\n    id: this.builder.control(''),\n    name: this.builder.control(''),\n    password: this.builder.control(''),\n    email: this.builder.control(''),\n    gender: this.builder.control('male'),\n    role: this.builder.control('', Validators.required),\n    isactive: this.builder.control(false)\n  });\n\n  loaduserdata(code: any) {\n    this.service.GetUserbyCode(code).subscribe(res => {\n      this.editdata = res;\n      console.log(this.editdata);\n      this.registerform.setValue({\n        id: this.editdata.id, name: this.editdata.name,\n        password: this.editdata.password, email: this.editdata.email, gender: this.editdata.gender,\n        role: this.editdata.role, isactive: this.editdata.isactive\n      });\n    });\n  }\n  UpdateUser() {\n    this.service.updateuser(this.registerform.value.id, this.registerform.value).subscribe(res => {\n      this.toastr.success('Updated successfully.');\n      this.dialogref.close();\n    });\n  }\n\n}\n","<h1 mat-dialog-title>Update User</h1>\n<form [formGroup]=\"registerform\" (ngSubmit)=\"UpdateUser()\">\n    <div mat-dialog-content>\n\n        <mat-form-field>\n            <mat-label>Role</mat-label>\n            <mat-select formControlName=\"role\">\n                <mat-option value=''>Select Role</mat-option>\n                <mat-option value=''>admin</mat-option>\n                <mat-option *ngFor=\"let item of rolelist\" [value]=\"item.code\">\n                    {{item.name}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <section class=\"example-section\">\n            <br>\n            <mat-checkbox  formControlName=\"isactive\" class=\"example-margin\">Is Active</mat-checkbox>\n        </section>\n\n    </div>\n    <div mat-dialog-actions>\n        <button type=\"submit\" mat-raised-button color=\"primary\" cdkFocusInitial>Save</button>\n        <button mat-raised-button color=\"warn\" mat-dialog-close>Close</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}