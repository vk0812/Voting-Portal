{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../service/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nexport class RegisterComponent {\n  constructor(builder, service, router, toastr) {\n    this.builder = builder;\n    this.service = service;\n    this.router = router;\n    this.toastr = toastr;\n    this.registerform = this.builder.group({\n      id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(5)])),\n      name: this.builder.control('', Validators.required),\n      password: this.builder.control('', Validators.compose([Validators.required, Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}')])),\n      email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\n      gender: this.builder.control('male'),\n      role: this.builder.control(''),\n      isactive: this.builder.control(false)\n    });\n  }\n  proceedregister() {\n    if (this.registerform.valid) {\n      this.service.RegisterUser(this.registerform.value).subscribe(result => {\n        this.toastr.success('Please contact admin for enable access.', 'Registered successfully');\n        this.router.navigate(['login']);\n      });\n    } else {\n      this.toastr.warning('Please enter valid data.');\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 32,\n  vars: 1,\n  consts: [[1, \"example-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"id\"], [\"matInput\", \"\", \"formControlName\", \"name\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"formControlName\", \"gender\", \"aria-label\", \"Select an option\"], [\"value\", \"male\"], [\"value\", \"female\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"routerLink\", \"/login\", \"mat-raised-button\", \"\", \"color\", \"accent\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\")(2, \"h2\");\n      i0.ɵɵtext(3, \"Registeration\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.proceedregister();\n      });\n      i0.ɵɵelementStart(6, \"mat-form-field\", 1)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\", 1)(11, \"mat-label\");\n      i0.ɵɵtext(12, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-form-field\", 1)(15, \"mat-label\");\n      i0.ɵɵtext(16, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"mat-form-field\", 1)(19, \"mat-label\");\n      i0.ɵɵtext(20, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"mat-radio-group\", 6)(23, \"mat-radio-button\", 7);\n      i0.ɵɵtext(24, \"Male\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"mat-radio-button\", 8);\n      i0.ɵɵtext(26, \"Female\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"div\")(28, \"button\", 9);\n      i0.ɵɵtext(29, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"a\", 10);\n      i0.ɵɵtext(31, \"Back to Login\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerform);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;AAWxD,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,OAAoB,EAAUC,OAAoB,EAAUC,MAAc,EACpFC,MAAqB;IADX,YAAO,GAAPH,OAAO;IAAuB,YAAO,GAAPC,OAAO;IAAuB,WAAM,GAANC,MAAM;IAC5E,WAAM,GAANC,MAAM;IAIhB,iBAAY,GAAG,IAAI,CAACH,OAAO,CAACI,KAAK,CAAC;MAChCC,EAAE,EAAE,IAAI,CAACL,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACU,OAAO,CAAC,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChGC,IAAI,EAAE,IAAI,CAACV,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACW,QAAQ,CAAC;MACnDG,QAAQ,EAAE,IAAI,CAACX,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACU,OAAO,CAAC,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACe,OAAO,CAAC,0EAA0E,CAAC,CAAC,CAAC,CAAC;MAC7KC,KAAK,EAAE,IAAI,CAACb,OAAO,CAACM,OAAO,CAAC,EAAE,EAAET,UAAU,CAACU,OAAO,CAAC,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACgB,KAAK,CAAC,CAAC,CAAC;MAC5FC,MAAM,EAAE,IAAI,CAACd,OAAO,CAACM,OAAO,CAAC,MAAM,CAAC;MACpCS,IAAI,EAAE,IAAI,CAACf,OAAO,CAACM,OAAO,CAAC,EAAE,CAAC;MAC9BU,QAAQ,EAAE,IAAI,CAAChB,OAAO,CAACM,OAAO,CAAC,KAAK;KACrC,CAAC;EAVF;EAWAW,eAAe;IACb,IAAI,IAAI,CAACC,YAAY,CAACC,KAAK,EAAE;MAC3B,IAAI,CAAClB,OAAO,CAACmB,YAAY,CAAC,IAAI,CAACF,YAAY,CAACG,KAAK,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;QACpE,IAAI,CAACpB,MAAM,CAACqB,OAAO,CAAC,yCAAyC,EAAC,yBAAyB,CAAC;QACxF,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACtB,MAAM,CAACuB,OAAO,CAAC,0BAA0B,CAAC;;EAEnD;;AAzBW5B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ9BC,gCAAU;MAEAA,6BAAa;MAAAA,iBAAK;MAE1BA,wCAAkB;MACwCA;QAAA,OAAYC,qBAAiB;MAAA,EAAC;MAChFD,yCAA2C;MAC9BA,wBAAQ;MAAAA,iBAAY;MAC/BA,2BAAsC;MACxCA,iBAAiB;MACjBA,0CAA2C;MAC5BA,qBAAI;MAAAA,iBAAY;MAC3BA,4BAAwC;MAC1CA,iBAAiB;MACjBA,0CAA2C;MAC9BA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA4D;MAC9DA,iBAAiB;MACjBA,0CAA2C;MAC9BA,sBAAK;MAAAA,iBAAY;MAC5BA,4BAAyC;MAC3CA,iBAAiB;MAEjBA,2CAAwE;MACvCA,qBAAI;MAAAA,iBAAmB;MACtDA,4CAAiC;MAAAA,uBAAM;MAAAA,iBAAmB;MAE5DA,4BAAK;MACuCA,uBAAM;MAAAA,iBAAS;MACzDA,8BAAwD;MAAAA,8BAAa;MAAAA,iBAAI;;;MAxBtDA,eAA0B;MAA1BA,4CAA0B","names":["Validators","RegisterComponent","constructor","builder","service","router","toastr","group","id","control","compose","required","minLength","name","password","pattern","email","gender","role","isactive","proceedregister","registerform","valid","RegisterUser","value","subscribe","result","success","navigate","warning","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\DELL\\vote-portal\\src\\app\\register\\register.component.ts","C:\\Users\\DELL\\vote-portal\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../service/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport {MatRadioModule} from '@angular/material/radio'; \n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  constructor(private builder: FormBuilder, private service: AuthService, private router: Router,\n    private toastr: ToastrService) {\n\n  }\n\n  registerform = this.builder.group({\n    id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(5)])),\n    name: this.builder.control('', Validators.required),\n    password: this.builder.control('', Validators.compose([Validators.required, Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}')])),\n    email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\n    gender: this.builder.control('male'),\n    role: this.builder.control(''),\n    isactive: this.builder.control(false)\n  });\n  proceedregister() {\n    if (this.registerform.valid) {\n      this.service.RegisterUser(this.registerform.value).subscribe(result => {\n        this.toastr.success('Please contact admin for enable access.','Registered successfully')\n        this.router.navigate(['login'])\n      });\n    } else {\n      this.toastr.warning('Please enter valid data.')\n    }\n  }\n\n}\n","<mat-card>\n  <mat-card-header>\n      <h2>Registeration</h2>\n  </mat-card-header>\n  <mat-card-content>\n      <form class=\"example-form\" [formGroup]=\"registerform\" (ngSubmit)=\"proceedregister()\">\n          <mat-form-field class=\"example-full-width\">\n            <mat-label>Username</mat-label>\n            <input matInput formControlName=\"id\" >\n          </mat-form-field>\n          <mat-form-field class=\"example-full-width\">\n              <mat-label>Name</mat-label>\n              <input matInput formControlName=\"name\" >\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>Password</mat-label>\n              <input type=\"password\" matInput formControlName=\"password\" >\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>Email</mat-label>\n              <input matInput formControlName=\"email\" >\n            </mat-form-field>\n            \n            <mat-radio-group formControlName=\"gender\" aria-label=\"Select an option\">\n              <mat-radio-button value=\"male\">Male</mat-radio-button>\n              <mat-radio-button value=\"female\">Female</mat-radio-button>\n            </mat-radio-group>\n            <div>\n              <button mat-raised-button color=\"primary\">Submit</button>\n              <a routerLink=\"/login\" mat-raised-button color=\"accent\">Back to Login</a>\n            </div>\n        </form>\n  </mat-card-content>\n</mat-card>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}